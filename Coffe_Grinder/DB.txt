-- Drop existing tables if they exist
DROP TABLE IF EXISTS Alerts;
DROP TABLE IF EXISTS OrderDetails;
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS CoffeeInventory;
DROP TABLE IF EXISTS CoffeeTypes;
DROP TABLE IF EXISTS OrderStatuses;
DROP TABLE IF EXISTS Users;
GO

-- Create Users table
CREATE TABLE Users
(
    UserID INT PRIMARY KEY IDENTITY(1,1),
    Username NVARCHAR(50) NOT NULL UNIQUE,
    Password NVARCHAR(50) NOT NULL, -- Plain text for development
    Role NVARCHAR(10) NOT NULL,
    PhoneNumber NVARCHAR(15) NULL
);
GO

-- Create CoffeeTypes table
CREATE TABLE CoffeeTypes
(
    CoffeeTypeID INT PRIMARY KEY IDENTITY(1,1),
    TypeName VARCHAR(100) UNIQUE NOT NULL
);
GO

-- Create CoffeeInventory table
CREATE TABLE CoffeeInventory
(
    CoffeeID INT PRIMARY KEY IDENTITY(1,1),
    CoffeeTypeID INT,
    QuantityInStock DECIMAL(18,3) CHECK (QuantityInStock >= 0), -- 3 decimal places
    PricePerKg DECIMAL(10,2) CHECK (PricePerKg >= 0),
    CoffeeName NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    LastUpdated DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CoffeeTypeID) REFERENCES CoffeeTypes(CoffeeTypeID)
);
GO

-- Create OrderStatuses table
CREATE TABLE OrderStatuses (
    StatusID INT PRIMARY KEY IDENTITY(1,1),
    StatusName NVARCHAR(50) NOT NULL UNIQUE
);
GO

-- Create Orders table
CREATE TABLE Orders
(
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    OrderDate DATETIME DEFAULT GETDATE(),
    StatusID INT,
    CustomerName VARCHAR(100) NOT NULL,
    TotalPrice DECIMAL(10,2),
    UserID INT,
    PhoneNumber NVARCHAR(15) NULL,
    Notes NVARCHAR(MAX) NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (StatusID) REFERENCES OrderStatuses(StatusID)
);
GO

-- Create OrderDetails table
CREATE TABLE OrderDetails
(
    OrderDetailID INT PRIMARY KEY IDENTITY(1,1),
    OrderID INT,
    CoffeeID INT,
    Quantity DECIMAL(18,3) CHECK (Quantity > 0), -- 3 decimal places
    UnitPrice DECIMAL(10,2) CHECK (UnitPrice >= 0),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE,
    FOREIGN KEY (CoffeeID) REFERENCES CoffeeInventory(CoffeeID) ON DELETE CASCADE
);
GO

-- Create Alerts table
CREATE TABLE Alerts
(
    AlertID INT PRIMARY KEY IDENTITY(1,1),
    CoffeeID INT,
    Quantity DECIMAL(18,3), -- 3 decimal places for low stock quantity
    Message TEXT,
    CreatedAt DATETIME DEFAULT GETDATE(),
    IsRead BIT DEFAULT 0,
    FOREIGN KEY (CoffeeID) REFERENCES CoffeeInventory(CoffeeID) ON DELETE CASCADE
);
GO

-- Insert sample data into Users with plain text passwords
INSERT INTO Users (Username, Password, PhoneNumber, Role)
VALUES 
('Admin', 'admin123', NULL, 'Admin'),
('User1', 'user1123', '1234567890', 'User'),
('User2', 'user2123', '0987654321', 'User'),
('Cashier', 'cashier123', '1234567890', 'Cashier');
GO

-- Insert sample data into CoffeeTypes
INSERT INTO CoffeeTypes (TypeName)
VALUES 
('Arabica'),
('Robusta'),
('Liberica'),
('Civet'),
('Excelsa');
GO

-- Insert sample data into CoffeeInventory
INSERT INTO CoffeeInventory (CoffeeTypeID, QuantityInStock, PricePerKg, CoffeeName, Description)
VALUES 
(1, 50.750, 250.00, 'Ethiopian Arabica', 'A well-known coffee type with a smooth, slightly acidic flavor.'),
(2, 100.256, 200.00, 'Vietnamese Robusta', 'A coffee type known for its strong, bitter taste.'),
(3, 8.500, 300.00, 'Philippine Liberica', 'A coffee type with a fruity and unique flavor.'),
(4, 15.342, 500.00, 'Indonesian Civet', 'A rare coffee type made from beans eaten and excreted by civet cats.'),
(5, 30.000, 275.00, 'African Excelsa', 'A rare coffee with complex flavor notes.');
GO

-- Insert sample data into OrderStatuses
INSERT INTO OrderStatuses (StatusName)
VALUES ('مكتمل'),('ملغي');
GO

-- Insert sample data into Orders
INSERT INTO Orders (OrderDate, StatusID, CustomerName, TotalPrice, UserID, PhoneNumber, Notes)
VALUES 
('2025-04-10 10:30:00', 1, 'Ahmed Ali', 700.00, 2, '1234567890', 'Please deliver in the morning'),
('2025-04-12 14:15:00', 2, 'Mona Hassan', 600.00, 3, '0987654321', 'Gift wrapping needed');
GO

-- Insert sample data into OrderDetails
INSERT INTO OrderDetails (OrderID, CoffeeID, Quantity, UnitPrice)
VALUES 
(1, 1, 2.500, 250.00),
(1, 2, 1.755, 200.00);
GO

-- Insert sample data into Alerts (low stock under 10 kg)
INSERT INTO Alerts (CoffeeID, Quantity, Message, CreatedAt, IsRead)
VALUES 
(3, 8.500, 'Low stock alert for Philippine Liberica: 8.500 kg', '2025-04-15 09:00:00', 0);
GO

-- Trigger for low stock alerts
CREATE TRIGGER trg_CoffeeInventory_LowStock
ON CoffeeInventory
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Alerts (CoffeeID, Quantity, Message, CreatedAt, IsRead)
    SELECT i.CoffeeID, i.QuantityInStock, 
           'Low stock alert for ' + i.CoffeeName + ': ' + CAST(i.QuantityInStock AS NVARCHAR(20)) + ' kg',
           GETDATE(), 0
    FROM inserted i
    WHERE i.QuantityInStock < 10.000
    AND NOT EXISTS (
        SELECT 1 FROM Alerts a 
        WHERE a.CoffeeID = i.CoffeeID AND a.Quantity = i.QuantityInStock
    );
END;
GO

-- Create indexes for better performance
CREATE INDEX IX_CoffeeInventory_CoffeeTypeID ON CoffeeInventory(CoffeeTypeID);
CREATE INDEX IX_Orders_StatusID ON Orders(StatusID);
CREATE INDEX IX_Orders_UserID ON Orders(UserID);
CREATE INDEX IX_OrderDetails_OrderID ON OrderDetails(OrderID);
CREATE INDEX IX_OrderDetails_CoffeeID ON OrderDetails(CoffeeID);
CREATE INDEX IX_Alerts_CoffeeID ON Alerts(CoffeeID);
CREATE INDEX IX_CoffeeInventory_LastUpdated ON CoffeeInventory(LastUpdated);
GO

-- Drop views if they exist
DROP VIEW IF EXISTS vw_CoffeeInventoryWithTypes;
DROP VIEW IF EXISTS vw_OrderDetailsExtended;
DROP VIEW IF EXISTS vw_LowStockAlerts;
GO

-- View to show coffee inventory with type names
CREATE VIEW vw_CoffeeInventoryWithTypes AS
SELECT 
    ci.CoffeeID,
    ci.CoffeeName,
    ct.TypeName,
    ci.QuantityInStock,
    ci.PricePerKg,
    ci.Description,
    ci.LastUpdated,
    CASE 
        WHEN ci.QuantityInStock < 10.000 THEN 'Low'
        WHEN ci.QuantityInStock < 30.000 THEN 'Medium'
        ELSE 'High'
    END AS StockLevel
FROM 
    CoffeeInventory ci
    JOIN CoffeeTypes ct ON ci.CoffeeTypeID = ct.CoffeeTypeID;
GO

-- View to show order details with product information
CREATE VIEW vw_OrderDetailsExtended AS
SELECT 
    od.OrderDetailID,
    o.OrderID,
    o.OrderDate,
    o.CustomerName,
    os.StatusName,
    ci.CoffeeName,
    ct.TypeName AS CoffeeType,
    od.Quantity,
    od.UnitPrice,
    (od.Quantity * od.UnitPrice) AS LineTotal,
    u.Username AS OrderTakenBy,
    o.PhoneNumber,
    o.Notes
FROM 
    OrderDetails od
    JOIN Orders o ON od.OrderID = o.OrderID
    JOIN OrderStatuses os ON o.StatusID = os.StatusID
    JOIN CoffeeInventory ci ON od.CoffeeID = ci.CoffeeID
    JOIN CoffeeTypes ct ON ci.CoffeeTypeID = ct.CoffeeTypeID
    LEFT JOIN Users u ON o.UserID = u.UserID;
GO

-- Create a view for low stock alerts with alert date
CREATE VIEW vw_LowStockAlerts AS
SELECT 
    ci.CoffeeID,
    ci.CoffeeName,
    ci.QuantityInStock,
    ct.TypeName,
    a.CreatedAt AS AlertDate,
    CASE 
        WHEN ci.QuantityInStock = 0 THEN 'Out of Stock'
        WHEN ci.QuantityInStock < 5.000 THEN 'Critical'
        WHEN ci.QuantityInStock < 15.000 THEN 'Low'
    END AS AlertLevel
FROM 
    CoffeeInventory ci
    JOIN CoffeeTypes ct ON ci.CoffeeTypeID = ct.CoffeeTypeID
    LEFT JOIN Alerts a ON ci.CoffeeID = a.CoffeeID
WHERE 
    ci.QuantityInStock < 15.000;
GO

ALTER TABLE Orders
ADD AmountPaid DECIMAL(18,2) NULL,
ChangeAmount DECIMAL(18,2) NULL;
GO

-- Select all data from tables to verify
SELECT * FROM Users;
SELECT * FROM CoffeeTypes;
SELECT * FROM CoffeeInventory;
SELECT * FROM OrderStatuses;
SELECT * FROM Orders;
SELECT * FROM OrderDetails;
SELECT * FROM Alerts;
GO

-- Test the views
SELECT * FROM vw_CoffeeInventoryWithTypes;
SELECT * FROM vw_OrderDetailsExtended;
SELECT * FROM vw_LowStockAlerts;
GO

ALTER TABLE CoffeeInventory
ALTER COLUMN PricePerKg DECIMAL(10,2) NOT NULL;

ALTER TABLE CoffeeInventory
ALTER COLUMN QuantityInStock DECIMAL(18,3) NOT NULL;


SELECT COLUMN_NAME, IS_NULLABLE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'CoffeeInventory'
  AND COLUMN_NAME IN ('PricePerKg', 'QuantityInStock');